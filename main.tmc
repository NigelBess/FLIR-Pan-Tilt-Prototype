// pin numbers
tiltMotor = 1
tiltSignal = 4 // 4: analog io 1
//panMotor = 0

//User values
threshold = 100//min speed reading to cause motor rotation
maxSpeed = 1500
joystickOffLowerValue = 1600
tiltMaxExpectedVoltageDelta = 950
joystickOffMaxVoltage = 40

//**********DONT CHANGE THESE************
//these convert axis params to names DONT CHANGE THESE
maxCurrent = 6
microStepRes = 140
pulseDiv = 154
actualSpeed = 3
targetSpeed = 2
maxAccel = 5
rampMode = 138
standByCurrent = 7
freewheelTime = 204
smartEnergySpeed = 182
stallGuardFilter = 173
stallGuardThreshold = 174
stallGuardSpeed = 181
//**********DONT CHANGE THESE************

//other
analogInputRes = 4095

//userParams
tiltVel = 0
panVel = 1
tiltOffset = 2



Start:
//SAP: set axis parameter
// SAP <parameter number>, <axis>, <value>
SAP maxCurrent, tiltMotor, 128//max current. (value/255)*inputCurrent
SAP standByCurrent, tiltMotor, 8
SAP stallGuardFilter, tiltMotor, 0
SAP stallGuardThreshold, tiltMotor, 20
SAP stallGuardSpeed, tiltMotor, threshold


//   microStepRes | Pusle Div | maxSpeed (rpm)
//        6       |     0     |     2342
//        5       |     1     |     2342
//        4       |     2     |     2342 
//        3       |     3     |     2342 
//        2       |     4     |     2342 
//Minimum recomeended microstepRes: 3
//Trinamics recommends maximizing microStepRes
//values greater than 6 don't work for the speed range we need

SAP microStepRes,tiltMotor, 6//mictrostep resolution (f) 2^value
SAP pulseDiv, tiltMotor, 0//pulse_div

SAP actualSpeed, tiltMotor, 0//actual speed 
SAP maxAccel, tiltMotor, 300//max accel
SAP rampMode, tiltMotor, 2//velocity mode

//create user vars
//SGP: set global parameter
//SGP <parameter number>, <bank>, <value>
SGP tiltVel, 2, 0
SGP tiltOffset, 2, 0



waitLoop:
	GIO tiltSignal, 1
	COMP joystickOffMaxVoltage
	JC LT, waitLoop

CSUB zeroJoystick

mainLoop:

	//load tilt offset into x accumulator
	GGP tiltOffset, 2
	CALCX  LOAD

	//GIO: Get Input
	//GIO <port number>, <bank number>
	GIO tiltSignal, 1//write analog input to accumulator. the 1 is for analog signals
	//analog input: 0 to 10v volts correstponds to 0-4095

	//Tilt signal is zeroed at ~1730
	CALCX SUB
	CALC MUL, -1//tilt axis voltage is reversed
	//CALC DIV, 2//analog signal goes has max value 4095. Now 2047 to match speed param size
	//CALC MUL, 2//joystick has max output 5v, but signal takes 10v
	//previous two lines negate eachother so I commented them out

	//AGP: Accumulator to global param
	//AGP <parameter number>, <bank>
	AGP tiltVel, 2
	
	// if accu is zero (below threshold), set tilt velocity to zero
	CALC DIV, threshold
	JC ZE, tiltStop
	//GGP: Get global parameter
	//GGP <parameter number>, <bank>
	GGP tiltVel, 2//restore old value to accumulator

	COMP 0
	JC LT, movingDown
	JC GT, movingUp

	//convert from reading to speed
	CALC MUL, maxSpeed
	CALC DIV, tiltMaxExpectedVoltageDelta
	
	endTiltCalc:
	//AAP: Accumulator to axis parameter
	//AAP <parameter number>, <motor number>
	AAP targetSpeed, tiltMotor// set target speed
	// rpm = value/2047*maxSpeedRpm
	endTilt:
//JA: jump always
JA mainLoop

tiltStop:
	GAP actualSpeed, tiltMotor
	JC ZE, endTilt
	SAP targetSpeed, tiltMotor, 0// set target speed
JA endTilt

joystickOff:
	GAP actualSpeed, tiltMotor
	JC ZE, endIf4
		SAP targetSpeed, tiltMotor, 0// set target speed
	endIf4:
JA mainLoop

movingUp:
	//check if joystick is off
	COMP joystickOffLowerValue
	JC GE, joystickOff
	CSUB rectify
JA endTiltCalc

movingDown:
	CALC MUL, -1
	//check if joystick is off
	COMP joystickOffLowerValue
	JC GE, joystickOff
	CSUB rectify
	CALC MUL, -1
JA endTiltCalc

rectify:
	CALC SUB, threshold
	COMP maxSpeed
	JC LT, endIF5
		CALC LOAD, maxSpeed
	endIF5:
RSUB

zeroJoystick:
	WAIT TICKS, tiltMotor, 50
//save tiltOffset (zero voltage of joystick)
	GIO tiltSignal, 1
	AGP tiltOffset, 2
RSUB