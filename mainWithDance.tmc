// pin numbers
tiltMotor = 1
panMotor = 0
tiltSignal = 4 // 4: analog io 1
panSignal = 0
joystickPower = 1

//dance positions
p1 = 10000
t1 =  0
p2 = 0
t2 = 10000
p3 = -10000
t3 = 0

//dance Params
timeBetweenMoves = 50//ticks
initialPause =  100//ticks

//User values
threshold = 100//min speed reading to cause motor rotation
maxSpeed = 750
joystickOffMaxVoltage = 40
joystickOffDelta = 1000
maxExpectedVoltageDelta = 600
maxTiltUp = 0
maxTiltDown = -320000
enforceLimits = 1// set this to zero if you want to bypass tilt limits
encoderPrescaleValue = 4674113// (713213 for decimal)
maxAccelValue = 300
standByCurrentValue = 0
encoderModeValue = 13
scaledCountsPerSpin = 1000000
maxExpectedEncoderValue = 300000
stallGuardThresholdValue = 2
timeOutTicks = 200
posModeSpeedValue = 50
joystickZeroTime = 5
maxCurrentValue = 255

//these are the range in which we can trust the encoder readings. used to calibrate actual position
minEncoderValue = -40000//100000
maxEncoderValue = 40000


//**********DONT CHANGE THESE************
//these convert axis params to names DONT CHANGE THESE
maxCurrent = 6
microStepRes = 140
pulseDiv = 154
actualSpeed = 3
actualPos = 1
targetSpeed = 2
targetPos = 0
maxAccel = 5
rampMode = 138
standByCurrent = 7
freewheelTime = 204
smartEnergySpeed = 182
stallGuardFilter = 173
stallGuardThreshold = 174
stallGuardSpeed = 181
encoderPos = 209
encoderMode = 201
encoderPrescaler = 210
posModeSpeed = 4
//**********DONT CHANGE THESE************

//other
analogInputRes = 4095

//user vars
tiltVel = 0
panVel = 1
tiltOffset = 2
tiltEnc = 3
temp = 4
panOffset = 5
backUpTiltEnc = 6
panSignalVar = 7
tiltSignalVar = 8
tiltPos = 9
backUpTiltPos = 10
tiltZero = 11//used to zero dance
panZero = 12//used to zero dance
tiltTarget = 13
panTarget = 14




Start:

//********TILT AXIS PARAMS********************
//SAP: set axis parameter
// SAP <parameter number>, <axis>, <value>
SAP maxCurrent, tiltMotor, maxCurrentValue//max current. (value/255)*inputCurrent
SAP standByCurrent, tiltMotor, standByCurrentValue
SAP stallGuardFilter, tiltMotor, 0
SAP stallGuardThreshold, tiltMotor, stallGuardThresholdValue
SAP stallGuardSpeed, tiltMotor, threshold


//   microStepRes | Pusle Div | maxSpeed (rpm)
//        6       |     0     |     2342
//        5       |     1     |     2342
//        4       |     2     |     2342 
//        3       |     3     |     2342 
//        2       |     4     |     2342 
//Minimum recomeended microstepRes: 3
//Trinamics recommends maximizing microStepRes
//values greater than 6 don't work for the speed range we need

SAP microStepRes,tiltMotor, 6//mictrostep resolution (f) 2^value
SAP pulseDiv, tiltMotor, 0//pulse_div

SAP actualSpeed, tiltMotor, 0//actual speed 
SAP maxAccel, tiltMotor, maxAccelValue//max accel
SAP posModeSpeed, tiltMotor, posModeSpeedValue

//motor steps per rev: 200
//@ 64 microstep: 12800 motor res
//encoder res: 10000?
//prescaler = motor res / encoder res * factor
//binary mode factor: 65536
//deciaml mode factor: 10000
SAP encoderPrescaler, tiltMotor, 4674113//713213
CALC LOAD, encoderModeValue
AAP encoderMode, tiltMotor



//********PAN AXIS PARAMS********************
SAP maxCurrent, panMotor, maxCurrentValue//max current. (value/255)*inputCurrent
SAP standByCurrent, panMotor, standByCurrentValue
SAP stallGuardFilter, panMotor, 0
SAP stallGuardThreshold, panMotor, stallGuardThresholdValue
SAP stallGuardSpeed, panMotor, threshold
SAP microStepRes,panMotor, 6//mictrostep resolution (f) 2^value
SAP pulseDiv, panMotor, 0//pulse_div
SAP actualSpeed, panMotor, 0//actual speed 
SAP maxAccel, panMotor, maxAccelValue//max accel
SAP posModeSpeed, panMotor, posModeSpeedValue

SAP encoderPrescaler, panMotor, encoderPrescaleValue
CALC LOAD, encoderModeValue
AAP encoderMode, panMotor


//create user vars
//SGP: set global parameter
//SGP <parameter number>, <bank>, <value>
SGP tiltVel, 2, 0
SGP tiltOffset, 2, 0
SGP temp, 2, 0
SGP panOffset, 2, 0
SGP panVel, 2, 0
SGP panSignalVar, 2, 0
SGP tiltSignalVar, 2, 0





waitLoop:
	GIO tiltSignal, 1
	COMP joystickOffMaxVoltage
	JC LT, waitLoop

CSUB zeroJoystick

CSUB loadEncoderValue

GAP encoderPos, tiltMotor
AAP actualPos, tiltMotor

startMain:
	SAP rampMode, panMotor, 2//velocity mode
	SAP rampMode, tiltMotor, 2//velocity mode
	CSUB stopAll
mainLoop:
	//calibrate actual position
	GAP encoderPos, tiltMotor
	COMP minEncoderValue
	JC LE, endCalibrate
	COMP maxEncoderValue
	JC GE, endCalibrate
	AAP actualPos, tiltMotor
	endCalibrate:

	//save position to permanent memory
	GAP encoderPos, tiltMotor
	AGP tiltEnc, 2
	AGP backUpTiltEnc, 2
	STGP tiltEnc, 2
	STGP backUpTiltEnc, 2
	GAP actualPos, tiltMotor
	AGP tiltPos, 2
	STGP tiltPos, 2
	AGP backUpTiltPos, 2
	STGP backUpTiltPos, 2

	//check if joystick is off
	GIO joystickPower, 0
	JC ZE, joystickOff

	//get signals
	GIO tiltSignal, 1//write analog input to accumulator. the 1 is for analog signals
	AGP tiltSignalVar, 2
	GIO panSIgnal, 1
	AGP panSignalVar, 2
 	
	//if both signals are zero, the joystick must be off
	//COMP joystickOffMaxVoltage
	//JC GE, endIf11
	//	GGP tiltSignalVar, 2
	//	JC GE, endIf11
	//	JA joystickOff
	//endIf11:
	
	
	//*******TILT********
	//load tilt offset into x accumulator
	GGP tiltOffset, 2
	CALCX  LOAD
	GGP tiltSignalVar, 2
	CALCX SUB	
	CALC MUL, -1//tilt axis voltage is reversed
	//CALC DIV, 2//analog signal goes has max value 4095. Now 2047 to match speed param size
	//CALC MUL, 2//joystick has max output 5v, but signal takes 10v
	//previous two lines negate eachother so I commented them out

	AGP tiltVel, 2
	
	// if accu is zero (below threshold), set tilt velocity to zero
	CALC DIV, threshold
	JC ZE, tiltStop
	//GGP: Get global parameter
	//GGP <parameter number>, <bank>
	GGP tiltVel, 2//restore old value to accumulator

	COMP 0
	JC LT, movingDown
	JC GT, movingUp
	endTiltCalc:
	AGP tiltVel, 2
	AAP targetSpeed, tiltMotor// set target speed
	endTilt:


	//*******PAN*********
	GGP panOffset, 2
	CALCX LOAD
	GGP panSignalVar, 2
	CALCX SUB
	CALC MUL, -1

	AGP panVel, 2
	CALC DIV, threshold
	JC ZE, panStop
	GGP panVel, 2//restore old value to accumulator

	
	
	COMP 0
	JC LT, movingLeft
	JC GT, movingRight
	
	endPanCalc:


	AGP panVel, 2
	AAP targetSpeed, panMotor
	endPan:
	
//JA: jump always
JA mainLoop

startDance:
	
	GAP actualPos, tiltMotor
	AGP tiltZero, 2
	GAP actualPos, panMotor
	AGP panZero, 2
	SAP rampMode, tiltMotor, 0
	SAP rampMode, panMotor, 0
	CSUB stopAll
	WAIT TICKS, tiltMotor, initialPause
	SAP targetSpeed, tiltMotor, posModeSpeedValue
	SAP targetSpeed, panMotor, posModeSpeedValue
	
danceLoop:
	//check if joystick is on
	GIO joystickPower, 0
	JC NZ, returnToMain

	CALC LOAD, p1
	AGP panTarget, 2
	CALC LOAD, t1
	AGP tiltTarget, 2
	CSUB goToTarget
	
	//check if joystick is on
	GIO joystickPower, 0
	JC NZ, returnToMain
	WAIT TICKS, tiltMotor, timeBetweenMoves

	CALC LOAD, p2
	AGP panTarget, 2
	CALC LOAD, t2
	AGP tiltTarget, 2
	CSUB goToTarget

	//check if joystick is on
	GIO joystickPower, 0
	JC NZ, returnToMain
	WAIT TICKS, tiltMotor, timeBetweenMoves

	CALC LOAD, p3
	AGP panTarget, 2
	CALC LOAD, t3
	AGP tiltTarget, 2
	CSUB goToTarget

	//check if joystick is on
	GIO joystickPower, 0
	JC NZ, returnToMain
	WAIT TICKS, tiltMotor, timeBetweenMoves

JA danceLoop

goToTarget:
	GGP panZero, 2
	CALCX LOAD
	GGP panTarget, 2
	CALCX ADD
	AAP targetPos, panMotor
	GGP tiltZero, 2
	CALCX LOAD
	GGP tiltTarget, 2
	CALCX ADD
	AAP targetPos, tiltMotor
	WAIT POS, panMotor, timeOutTicks
	WAIT POS, tiltMotor, timeOutTicks
RSUB

returnToMain:
	CSUB zeroJoystick
JA startMain

tiltStop:
	GAP actualSpeed, tiltMotor
	JC ZE, endTilt
	SAP targetSpeed, tiltMotor, 0// set target speed
	SGP tiltVel, 2, 0
JA endTilt

panStop:
	GAP actualSpeed, panMotor
	JC ZE, endPan
	SAP targetSpeed, panMotor, 0
	SGP panVel, 2, 0
JA endPan

joystickOff:
	CSUB stopAll
JA startDance

stopALL:
	GAP actualSpeed, tiltMotor
	JC ZE, endIf4
		SAP targetSpeed, tiltMotor, 0// set target speed
	endIf4:
	GAP actualSpeed, panMotor
	JC ZE, endIf9
		SAP targetSpeed, panMotor, 0// set target speed
	endIf9:
RSUB


movingUp:
	//COMP joystickOffDelta
	//JC GE, joystickOff
	CSUB rectify
	AGP temp, 2
	CALC LOAD, enforceLimits
	JC ZE, endIf7
		GAP actualPos, tiltMotor
		COMP maxTiltUp
		JC GE, tiltStop
	endIf7:
	GGP temp, 2
JA endTiltCalc

movingDown:
	CALC MUL, -1
	//COMP joystickOffDelta
	//JC GE, joystickOff
	CSUB rectify
	AGP temp, 2
	CALC LOAD, enforceLimits
	JC ZE, endIf6
		GAP actualPos, tiltMotor
		COMP maxTiltDown
		JC LE, tiltStop
	endIf6:
	GGP temp, 2
	CALC MUL, -1
JA endTiltCalc

movingRight:
	//COMP joystickOffDelta
	//JC GE, joystickOff
	CSUB rectify
JA endPanCalc

movingLeft:
	CALC MUL, -1
	//COMP joystickOffDelta
	//JC GE, joystickOff
	CSUB rectify
	CALC MUL, -1
JA endPanCalc

rectify:
	CALC MUL, maxSpeed
	CALC DIV, maxExpectedVoltageDelta
	CALC SUB, threshold
	COMP maxSpeed
	JC LT, endIF5
		CALC LOAD, maxSpeed
	endIF5:	
	AGP temp, 2
RSUB

zeroJoystick:
	WAIT TICKS, tiltMotor, joystickZeroTime
//save tiltOffset (zero voltage of joystick)
	GIO tiltSignal, 1
	AGP tiltOffset, 2
	GIO panSignal, 1
	AGP panOffset, 2
RSUB

loadEncoderValue:
	RSGP tiltEnc, 2
	GGP tiltEnc, 2
	//check if value is corrupted
	COMP maxExpectedEncoderValue
	JC GE, useBackup
	CALC MUL, -1
	JC GE, useBackUp
	CALC MUL, -1
	JA useOld	
	useBackup:
		RSGP backUpTiltEnc, 2
		GGP backUpTiltEnc, 2
	useOld:
	AAP encoderPos, tiltMotor

	RSGP tiltPos, 2
	GGP tiltPos, 2
	//check if value is corrupted
	COMP maxExpectedEncoderValue
	JC GE, useBackup2
	CALC MUL, -1
	JC GE, useBackUp2
	CALC MUL, -1
	JA useOld2
	useBackup2:
		RSGP backUpTiltPos, 2
		GGP backUpTiltPos, 2
	useOld2:
	AAP encoderPos, tiltMotor
	WAIT TICKS, tiltMotor, 100
RSUB

modEncoder:
	GAP encoderPos, tiltMotor
	CALC MOD, scaledCountsPerSpin
	AAP encoderPos, tiltMotor
RSUB